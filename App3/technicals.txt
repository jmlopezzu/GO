Sure, let's create a simple backend in Go that serves an API and a React frontend to interact with it. We'll use the Gorilla Mux package for handling HTTP requests in Go. This example will include a simple API to manage items with a name and price, and a React frontend to display and add items.

### Backend (Go):


go mod init <module-name>

go mod init myapp


1. Install Gorilla Mux:

   ```bash
   go get -u github.com/gorilla/mux
   ```

2. Create a file named `main.go` for the backend:

   ```go
   // main.go
   package main

   import (
   	"encoding/json"
   	"fmt"
   	"log"
   	"net/http"

   	"github.com/gorilla/mux"
   )

   // Item struct represents an item with a name and price.
   type Item struct {
   	ID    string  `json:"id"`
   	Name  string  `json:"name"`
   	Price float64 `json:"price"`
   }

   var items []Item

   // GetItemsHandler returns the list of items.
   func GetItemsHandler(w http.ResponseWriter, r *http.Request) {
   	w.Header().Set("Content-Type", "application/json")
   	json.NewEncoder(w).Encode(items)
   }

   // AddItemHandler adds a new item to the list.
   func AddItemHandler(w http.ResponseWriter, r *http.Request) {
   	var newItem Item
   	if err := json.NewDecoder(r.Body).Decode(&newItem); err != nil {
   		http.Error(w, "Invalid request body", http.StatusBadRequest)
   		return
   	}

   	newItem.ID = fmt.Sprintf("%d", len(items)+1)
   	items = append(items, newItem)

   	w.Header().Set("Content-Type", "application/json")
   	json.NewEncoder(w).Encode(newItem)
   }

   func main() {
   	router := mux.NewRouter()

   	// API routes
   	router.HandleFunc("/api/items", GetItemsHandler).Methods("GET")
   	router.HandleFunc("/api/items", AddItemHandler).Methods("POST")

   	// Serve static files (React build)
   	router.PathPrefix("/").Handler(http.FileServer(http.Dir("./frontend/build")))

   	fmt.Println("Server started on :3001")
   	log.Fatal(http.ListenAndServe(":3001", router))
   }
   ```

   Make sure you have a `frontend` folder in the same directory as `main.go`. This folder should contain your React app's build files.

### Frontend (React):

1. Assuming you have a React app created (if not, you can use `create-react-app`), build the app:

   ```bash
   npm run build
   ```

2. Ensure that the build output is in the `frontend/build` directory.

3. Add the following code to your `App.js`:

   ```jsx
   // src/App.js
   import React, { useState, useEffect } from 'react';

   const App = () => {
     const [items, setItems] = useState([]);
     const [newItem, setNewItem] = useState({ name: '', price: 0 });

     useEffect(() => {
       fetch('/api/items')
         .then((response) => response.json())
         .then((data) => setItems(data));
     }, []);

     const handleAddItem = () => {
       fetch('/api/items', {
         method: 'POST',
         headers: {
           'Content-Type': 'application/json',
         },
         body: JSON.stringify(newItem),
       })
         .then((response) => response.json())
         .then((data) => {
           setItems([...items, data]);
           setNewItem({ name: '', price: 0 });
         });
     };

     return (
       <div>
         <h1>Simple Item Manager</h1>
         <ul>
           {items.map((item) => (
             <li key={item.ID}>
               {item.Name} - ${item.Price}
             </li>
           ))}
         </ul>
         <div>
           <input
             type="text"
             placeholder="Name"
             value={newItem.name}
             onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
           />
           <input
             type="number"
             placeholder="Price"
             value={newItem.price}
             onChange={(e) => setNewItem({ ...newItem, price: parseFloat(e.target.value) })}
           />
           <button onClick={handleAddItem}>Add Item</button>
         </div>
       </div>
     );
   };

   export default App;
   ```

   Ensure the API URLs in `fetch` calls match the routes defined in your Go backend.

4. Start your Go server:

   ```bash
   go run main.go
   ```

   Now, your Go backend should be running on `http://localhost:3001`, and your React frontend will be served from the same URL.

Access the frontend in your browser, and you should see a simple item manager interface. You can add items, and the list will be updated dynamically.